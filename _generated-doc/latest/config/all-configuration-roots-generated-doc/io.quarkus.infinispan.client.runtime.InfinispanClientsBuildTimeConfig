[{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.marshaller-class","configDoc":"Sets the marshallerClass. Default is ProtoStreamMarshaller","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"marshaller-class","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.cache.\"cache\".configuration-resource","configDoc":"Cache configuration file in XML, JSON or YAML is defined in build time to create the cache on first access. An example of the user defined property. cacheConfig.xml file is located in the 'resources' folder: quarkus.infinispan-client.cache.bookscache.configuration-resource=cacheConfig.xml","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"configuration-resource","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.infinispan-client.devservices.enabled","configDoc":"If DevServices has been explicitly enabled or disabled. DevServices is generally enabled by default, unless there is an existing configuration present. \nWhen DevServices is enabled Quarkus will attempt to automatically configure and start a database when running in Dev or Test mode and when Docker is running.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.infinispan-client.devservices.port","configDoc":"Optional fixed port the dev service will listen to. \nIf not defined, the port will be chosen randomly.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"port","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.infinispan-client.devservices.shared","configDoc":"Indicates if the Infinispan server managed by Quarkus Dev Services is shared. When shared, Quarkus looks for running containers using label-based service discovery. If a matching container is found, it is used, and so a second one is not started. Otherwise, Dev Services for Infinispan starts a new container. \nThe discovery uses the `quarkus-dev-service-infinispan` label. The value is configured using the `service-name` property. \nContainer sharing is only used in dev mode.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"shared","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.devservices.service-name","configDoc":"The value of the `quarkus-dev-service-infinispan` label attached to the started container. This property is used when `shared` is set to `true`. In this case, before starting a container, Dev Services for Infinispan looks for a container with the `quarkus-dev-service-infinispan` label set to the configured value. If found, it will use this container instead of starting a new one. Otherwise, it starts a new container with the `quarkus-dev-service-infinispan` label set to the specified value. \nThis property is used when you need multiple shared Infinispan servers.","withinAMap":false,"defaultValue":"infinispan","javaDocSiteLink":"","docMapKey":"service-name","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.devservices.image-name","configDoc":"The image to use. Note that only official Infinispan images are supported.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"image-name","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.devservices.artifacts","configDoc":"List of the artifacts to automatically download and add to the Infinispan server libraries. \nFor example a Maven coordinate (org.postgresql:postgresql:42.3.1) or a dependency location url. \nIf an invalid value is passed, the Infinispan server will throw an error when trying to start.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"artifacts","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.devservices.site","configDoc":"Add a site name to start the Infinispan Server Container with Cross Site Replication enabled (ex. lon). Cross Site Replication is the capability to connect two separate Infinispan Server Clusters that might run in different Data Centers, and configure backup caches to copy the data across the clusters with active-active or active-passive replication. See more about Cross Site Replication in the Infinispan Documentation https://infinispan.org/docs/stable/titles/xsite/xsite.html Configure `mcast-port` to avoid forming a cluster with any other running Infinispan Server container.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"site","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.infinispan-client.devservices.mcast-port","configDoc":"If you are running an Infinispan Server already in docker, if the containers use the same mcastPort they will form a cluster. Set a different mcastPort to create a separate cluster in Docker (e. 46656). A common use case in a local Docker development mode, is the need of having two different Infinispan Clusters with Cross Site Replication enabled. see https://github.com/infinispan/infinispan-simple-tutorials/blob/main/infinispan-remote/cross-site-replication/docker-compose/","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"mcast-port","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.infinispan-client.devservices.tracing.enabled","configDoc":"Runs the Infinispan Server container with tracing enabled. Traces are disabled by default","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"tracing","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.devservices.tracing.exporter.otlp.endpoint","configDoc":"Sets Infinispan Server otlp endpoint. Default value is http://localhost:4317","withinAMap":false,"defaultValue":"http://localhost:4317","javaDocSiteLink":"","docMapKey":"exporter-otlp-endpoint","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".marshaller-class","configDoc":"Sets the marshallerClass. Default is ProtoStreamMarshaller","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"marshaller-class","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".cache.\"cache\".configuration-resource","configDoc":"Cache configuration file in XML, JSON or YAML is defined in build time to create the cache on first access. An example of the user defined property. cacheConfig.xml file is located in the 'resources' folder: quarkus.infinispan-client.cache.bookscache.configuration-resource=cacheConfig.xml","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"configuration-resource","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.enabled","configDoc":"If DevServices has been explicitly enabled or disabled. DevServices is generally enabled by default, unless there is an existing configuration present. \nWhen DevServices is enabled Quarkus will attempt to automatically configure and start a database when running in Dev or Test mode and when Docker is running.","withinAMap":true,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.port","configDoc":"Optional fixed port the dev service will listen to. \nIf not defined, the port will be chosen randomly.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"port","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.shared","configDoc":"Indicates if the Infinispan server managed by Quarkus Dev Services is shared. When shared, Quarkus looks for running containers using label-based service discovery. If a matching container is found, it is used, and so a second one is not started. Otherwise, Dev Services for Infinispan starts a new container. \nThe discovery uses the `quarkus-dev-service-infinispan` label. The value is configured using the `service-name` property. \nContainer sharing is only used in dev mode.","withinAMap":true,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"shared","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.service-name","configDoc":"The value of the `quarkus-dev-service-infinispan` label attached to the started container. This property is used when `shared` is set to `true`. In this case, before starting a container, Dev Services for Infinispan looks for a container with the `quarkus-dev-service-infinispan` label set to the configured value. If found, it will use this container instead of starting a new one. Otherwise, it starts a new container with the `quarkus-dev-service-infinispan` label set to the specified value. \nThis property is used when you need multiple shared Infinispan servers.","withinAMap":true,"defaultValue":"infinispan","javaDocSiteLink":"","docMapKey":"service-name","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.image-name","configDoc":"The image to use. Note that only official Infinispan images are supported.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"image-name","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.artifacts","configDoc":"List of the artifacts to automatically download and add to the Infinispan server libraries. \nFor example a Maven coordinate (org.postgresql:postgresql:42.3.1) or a dependency location url. \nIf an invalid value is passed, the Infinispan server will throw an error when trying to start.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"artifacts","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.site","configDoc":"Add a site name to start the Infinispan Server Container with Cross Site Replication enabled (ex. lon). Cross Site Replication is the capability to connect two separate Infinispan Server Clusters that might run in different Data Centers, and configure backup caches to copy the data across the clusters with active-active or active-passive replication. See more about Cross Site Replication in the Infinispan Documentation https://infinispan.org/docs/stable/titles/xsite/xsite.html Configure `mcast-port` to avoid forming a cluster with any other running Infinispan Server container.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"site","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.mcast-port","configDoc":"If you are running an Infinispan Server already in docker, if the containers use the same mcastPort they will form a cluster. Set a different mcastPort to create a separate cluster in Docker (e. 46656). A common use case in a local Docker development mode, is the need of having two different Infinispan Clusters with Cross Site Replication enabled. see https://github.com/infinispan/infinispan-simple-tutorials/blob/main/infinispan-remote/cross-site-replication/docker-compose/","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"mcast-port","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.tracing.enabled","configDoc":"Runs the Infinispan Server container with tracing enabled. Traces are disabled by default","withinAMap":true,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"tracing","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.infinispan-client.\"named-infinispan-clients\".devservices.tracing.exporter.otlp.endpoint","configDoc":"Sets Infinispan Server otlp endpoint. Default value is http://localhost:4317","withinAMap":true,"defaultValue":"http://localhost:4317","javaDocSiteLink":"","docMapKey":"exporter-otlp-endpoint","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.infinispan-client","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.infinispan-client.health.enabled","configDoc":"Whether or not an health check is published in case the smallrye-health extension is present. \nThis is a global setting and is not specific to an Infinispan Client.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"health-enabled","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.infinispan-client","enum":false}}]