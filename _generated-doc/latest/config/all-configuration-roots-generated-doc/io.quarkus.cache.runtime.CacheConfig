[{"configDocKey":{"type":"boolean","key":"quarkus.cache.enabled","configDoc":"Whether or not the cache extension is enabled.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocSection":{"name":"quarkus.cache.caffeine.default-config","optional":false,"withinAMap":false,"sectionDetails":"== Default configuration applied to all Caffeine caches (lowest precedence)","sectionDetailsTitle":"Default configuration applied to all Caffeine caches (lowest precedence)","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.cache","configGroupType":"io.quarkus.cache.runtime.CacheConfig.CaffeineConfig.CaffeineCacheConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.cache.caffeine.initial-capacity","configDoc":"Minimum total size for the internal data structures. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"initial-capacity","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.lang.Long","key":"quarkus.cache.caffeine.maximum-size","configDoc":"Maximum number of entries the cache may contain. Note that the cache *may evict an entry before this limit is exceeded or temporarily exceed the threshold while evicting*. As the cache size grows close to the maximum, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"maximum-size","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.cache.caffeine.expire-after-write","configDoc":"Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"expire-after-write","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.cache.caffeine.expire-after-access","configDoc":"Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last read.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"expire-after-access","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.cache.caffeine.metrics-enabled","configDoc":"Whether or not metrics are recorded if the application depends on the Micrometer extension. Setting this value to `true` will enable the accumulation of cache stats inside Caffeine.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"metrics-enabled","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.cache.caffeine.caches-config","optional":false,"withinAMap":false,"sectionDetails":"== Additional configuration applied to a specific Caffeine cache (highest precedence)","sectionDetailsTitle":"Additional configuration applied to a specific Caffeine cache (highest precedence)","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.cache","configGroupType":"io.quarkus.cache.runtime.CacheConfig.CaffeineConfig.CaffeineCacheConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.cache.caffeine.\"cache-name\".initial-capacity","configDoc":"Minimum total size for the internal data structures. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"initial-capacity","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.lang.Long","key":"quarkus.cache.caffeine.\"cache-name\".maximum-size","configDoc":"Maximum number of entries the cache may contain. Note that the cache *may evict an entry before this limit is exceeded or temporarily exceed the threshold while evicting*. As the cache size grows close to the maximum, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"maximum-size","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.cache.caffeine.\"cache-name\".expire-after-write","configDoc":"Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"expire-after-write","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.cache.caffeine.\"cache-name\".expire-after-access","configDoc":"Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last read.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"expire-after-access","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.cache.caffeine.\"cache-name\".metrics-enabled","configDoc":"Whether or not metrics are recorded if the application depends on the Micrometer extension. Setting this value to `true` will enable the accumulation of cache stats inside Caffeine.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"metrics-enabled","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.cache","enum":false}}],"anchorPrefix":null}}]