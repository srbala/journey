[{"configDocKey":{"type":"string","key":"quarkus.native.additional-build-args","configDoc":"Comma-separated, additional arguments to pass to the build process. If an argument includes the `,` symbol, it needs to be escaped, e.g. `++\\\\++,`","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"additional-build-args","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-http-url-handler","configDoc":"If the HTTP url handler should be enabled, allowing you to do URL.openConnection() for HTTP URLs","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enable-http-url-handler","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-https-url-handler","configDoc":"If the HTTPS url handler should be enabled, allowing you to do URL.openConnection() for HTTPS URLs","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-https-url-handler","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.headless","configDoc":"The default value for java.awt.headless JVM option. Switching this option affects linking of awt libraries.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"headless","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.file-encoding","configDoc":"Defines the file encoding as in `-Dfile.encoding=...`. Native image runtime uses the host's (i.e. build time) value of `file.encoding` system property. We intentionally default this to UTF-8 to avoid platform specific defaults to be picked up which can then result in inconsistent behavior in the generated native executable.","withinAMap":false,"defaultValue":"UTF-8","javaDocSiteLink":"","docMapKey":"file-encoding","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.add-all-charsets","configDoc":"If all character sets should be added to the native image. This increases image size","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"add-all-charsets","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.graalvm-home","configDoc":"The location of the Graal distribution","withinAMap":false,"defaultValue":"${GRAALVM_HOME:}","javaDocSiteLink":"","docMapKey":"graalvm-home","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"java.io.File","key":"quarkus.native.java-home","configDoc":"The location of the JDK","withinAMap":false,"defaultValue":"${java.home}","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/io/File.html","docMapKey":"java-home","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.native-image-xmx","configDoc":"The maximum Java heap to be used during the native image generation","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"native-image-xmx","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.debug-build-process","configDoc":"If the native image build should wait for a debugger to be attached before running. This is an advanced option and is generally only intended for those familiar with GraalVM internals","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"debug-build-process","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.publish-debug-build-process-port","configDoc":"If the debug port should be published when building with docker and debug-build-process is true","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"publish-debug-build-process-port","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-isolates","configDoc":"If isolates should be enabled","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enable-isolates","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-fallback-images","configDoc":"If a JVM based 'fallback image' should be created if native image fails. This is not recommended, as this is functionally the same as just running the application in a JVM","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-fallback-images","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.auto-service-loader-registration","configDoc":"If all META-INF/services entries should be automatically registered","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"auto-service-loader-registration","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.dump-proxies","configDoc":"If the bytecode of all proxies should be dumped for inspection","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"dump-proxies","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.native.container-build","configDoc":"If this build should be done using a container runtime. Unless container-runtime is also set, docker will be used by default. If docker is not available or is an alias to podman, podman will be used instead as the default.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"container-build","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.remote-container-build","configDoc":"If this build is done using a remote docker daemon.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"remote-container-build","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.builder-image","configDoc":"The docker image to use to do the image build. It can be one of `graalvm`, `mandrel`, or the full image path, e.g. `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java17`.","withinAMap":false,"defaultValue":"${platform.quarkus.native.builder-image}","javaDocSiteLink":"","docMapKey":"builder-image","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"io.quarkus.runtime.util.ContainerRuntimeUtil.ContainerRuntime","key":"quarkus.native.container-runtime","configDoc":"The container runtime (e.g. docker) that is used to do an image based build. If this is set then a container build is always done.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"container-runtime","configPhase":"BUILD_TIME","acceptedValues":["`docker`","`podman`","`unavailable`"],"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":true}},{"configDocKey":{"type":"string","key":"quarkus.native.container-runtime-options","configDoc":"Options to pass to the container runtime","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"container-runtime-options","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"io.quarkus.deployment.pkg.NativeConfig.MonitoringOption","key":"quarkus.native.monitoring","configDoc":"Enable monitoring options that allow the VM to be inspected at run time.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"monitoring","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.full-stack-traces","configDoc":"If full stack traces are enabled in the resulting image","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"full-stack-traces","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-reports","configDoc":"If the reports on call paths and included packages/classes/methods should be generated","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-reports","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.report-exception-stack-traces","configDoc":"If exceptions should be reported with a full stack trace","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"report-exception-stack-traces","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.report-errors-at-runtime","configDoc":"If errors should be reported at runtime. This is a more relaxed setting, however it is not recommended as it means your application may fail at runtime if an unsupported feature is used by accident.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"report-errors-at-runtime","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.reuse-existing","configDoc":"Don't build a native image if it already exists. This is useful if you have already built an image and you want to use Quarkus to deploy it somewhere. Note that this is not able to detect if the existing image is outdated, if you have modified source or config and want a new image you must not use this flag.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"reuse-existing","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.resources.includes","configDoc":"A comma separated list of globs to match resource paths that should be added to the native image. \nUse slash (`/`) as a path separator on all platforms. Globs must not start with slash. \nBy default, no resources are included. \nExample: Given that you have `src/main/resources/ignored.png` and `src/main/resources/foo/selected.png` in your source tree and one of your dependency JARs contains `bar/some.txt` file, with the following configuration quarkus.native.resources.includes = foo/++**++,bar/++**++/++*++.txt  the files `src/main/resources/foo/selected.png` and `bar/some.txt` will be included in the native image, while `src/main/resources/ignored.png` will not be included. \nSupported glob features   Feature Description   `++*++` Matches a (possibly empty) sequence of characters that does not contain slash (`/`)   `++**++` Matches a (possibly empty) sequence of characters that may contain slash (`/`)   `?` Matches one character, but not slash   `++[++abc++]++` Matches one character given in the bracket, but not slash   `++[++a-z++]++` Matches one character from the range given in the bracket, but not slash   `++[++!abc++]++` Matches one character not named in the bracket; does not match slash   `++[++a-z++]++` Matches one character outside the range given in the bracket; does not match slash   `++{++one,two,three++}++` Matches any of the alternating tokens separated by comma; the tokens may contain wildcards, nested alternations and ranges   `++\\++` The escape character   \nNote that there are three levels of escaping when passing this option via `application.properties`:  \n . `application.properties` parser \n - MicroProfile Config list converter that splits the comma separated list \n - Glob parser  All three levels use backslash (`++\\++`) as the escaping character. So you need to use an appropriate number of backslashes depending on which level you want to escape. \nNote that Quarkus extensions typically include the resources they require by themselves. This option is useful in situations when the built-in functionality is not sufficient.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"includes","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.resources.excludes","configDoc":"A comma separated list of globs to match resource paths that should *not* be added to the native image. \nUse slash (`/`) as a path separator on all platforms. Globs must not start with slash. \nPlease refer to `includes` for details about the glob syntax. \nBy default, no resources are excluded. \nExample: Given that you have `src/main/resources/red.png` and `src/main/resources/foo/green.png` in your source tree and one of your dependency JARs contains `bar/blue.png` file, with the following configuration quarkus.native.resources.includes = ++**++/++*++.png quarkus.native.resources.excludes = foo/++**++,++**++/green.png  the resource `red.png` will be available in the native image while the resources `foo/green.png` and `bar/blue.png` will not be available in the native image.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"excludes","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.debug.enabled","configDoc":"If debug is enabled and debug symbols are generated. The symbols will be generated in a separate .debug file.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.native.enable-dashboard-dump","configDoc":"Generate the report files for GraalVM Dashboard.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-dashboard-dump","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.native.compression.level","configDoc":"The compression level in ++[++1, 10++]++. 10 means _best_ Higher compression level requires more time to compress the executable.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"level","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.native","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.native.compression.additional-args","configDoc":"Allows passing extra arguments to the UPX command line (like --brute). The arguments are comma-separated. The exhaustive list of parameters can be found in link:https://github.com/upx/upx/blob/devel/doc/upx.pod[https://github.com/upx/upx/blob/devel/doc/upx.pod].","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"additional-args","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.native","enum":false}}]