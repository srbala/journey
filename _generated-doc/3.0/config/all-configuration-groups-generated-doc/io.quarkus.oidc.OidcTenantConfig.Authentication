[{"configDocKey":{"type":"io.quarkus.oidc.OidcTenantConfig.Authentication.ResponseMode","key":".response-mode","configDoc":"Authorization code flow response mode","withinAMap":false,"defaultValue":"query","javaDocSiteLink":"","docMapKey":"response-mode","configPhase":"BUILD_TIME","acceptedValues":["tooltip:query[Authorization response parameters are encoded in the query string added to the redirect_uri]","tooltip:form-post[Authorization response parameters are encoded as HTML form values that are auto-submitted in the browser and transmitted via the HTTP POST method using the application/x-www-form-urlencoded content type]"],"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":true}},{"configDocKey":{"type":"string","key":".redirect-path","configDoc":"Relative path for calculating a \"redirect_uri\" query parameter. It has to start from a forward slash and will be appended to the request URI's host and port. For example, if the current request URI is 'https://localhost:8080/service' then a 'redirect_uri' parameter will be set to 'https://localhost:8080/' if this property is set to '/' and be the same as the request URI if this property has not been configured. Note the original request URI will be restored after the user has authenticated if 'restorePathAfterRedirect' is set to 'true'.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"redirect-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"boolean","key":".restore-path-after-redirect","configDoc":"If this property is set to 'true' then the original request URI which was used before the authentication will be restored after the user has been redirected back to the application. Note if `redirectPath` property is not set, the original request URI will be restored even if this property is disabled.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"restore-path-after-redirect","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"boolean","key":".remove-redirect-parameters","configDoc":"Remove the query parameters such as 'code' and 'state' set by the OIDC server on the redirect URI after the user has authenticated by redirecting a user to the same URI but without the query parameters.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"remove-redirect-parameters","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".error-path","configDoc":"Relative path to the public endpoint which will process the error response from the OIDC authorization endpoint. If the user authentication has failed then the OIDC provider will return an 'error' and an optional 'error_description' parameters, instead of the expected authorization 'code'. If this property is set then the user will be redirected to the endpoint which can return a user-friendly error description page. It has to start from a forward slash and will be appended to the request URI's host and port. For example, if it is set as '/error' and the current request URI is 'https://localhost:8080/callback?error=invalid_scope' then a redirect will be made to 'https://localhost:8080/error?error=invalid_scope'. If this property is not set then HTTP 401 status will be returned in case of the user authentication failure.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"error-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"boolean","key":".verify-access-token","configDoc":"Both ID and access tokens are fetched from the OIDC provider as part of the authorization code flow. ID token is always verified on every user request as the primary token which is used to represent the principal and extract the roles. Access token is not verified by default since it is meant to be propagated to the downstream services. The verification of the access token should be enabled if it is injected as a JWT token. Access tokens obtained as part of the code flow will always be verified if `quarkus.oidc.roles.source` property is set to `accesstoken` which means the authorization decision will be based on the roles extracted from the access token. Bearer access tokens are always verified.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"verify-access-token","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":".force-redirect-https-scheme","configDoc":"Force 'https' as the 'redirect_uri' parameter scheme when running behind an SSL terminating reverse proxy. This property, if enabled, will also affect the logout `post_logout_redirect_uri` and the local redirect requests.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"force-redirect-https-scheme","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".scopes","configDoc":"List of scopes","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"scopes","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":".add-openid-scope","configDoc":"Add the 'openid' scope automatically to the list of scopes. This is required for OpenId Connect providers but will not work for OAuth2 providers such as Twitter OAuth2 which does not accept that scope and throws an error.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"add-openid-scope","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"`Map<String,String>`","key":".extra-params","configDoc":"Additional properties which will be added as the query parameters to the authentication redirect URI.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"extra-params","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":true,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".forward-params","configDoc":"Request URL query parameters which, if present, will be added to the authentication redirect URI.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"forward-params","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"boolean","key":".cookie-force-secure","configDoc":"If enabled the state, session and post logout cookies will have their 'secure' parameter set to 'true' when HTTP is used. It may be necessary when running behind an SSL terminating reverse proxy. The cookies will always be secure if HTTPS is used even if this property is set to false.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"cookie-force-secure","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".cookie-suffix","configDoc":"Cookie name suffix. For example, a session cookie name for the default OIDC tenant is 'q_session' but can be changed to 'q_session_test' if this property is set to 'test'.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cookie-suffix","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".cookie-path","configDoc":"Cookie path parameter value which, if set, will be used to set a path parameter for the session, state and post logout cookies. The `cookie-path-header` property, if set, will be checked first.","withinAMap":false,"defaultValue":"/","javaDocSiteLink":"","docMapKey":"cookie-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".cookie-path-header","configDoc":"Cookie path header parameter value which, if set, identifies the incoming HTTP header whose value will be used to set a path parameter for the session, state and post logout cookies. If the header is missing then the `cookie-path` property will be checked.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cookie-path-header","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".cookie-domain","configDoc":"Cookie domain parameter value which, if set, will be used for the session, state and post logout cookies.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cookie-domain","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"io.quarkus.oidc.OidcTenantConfig.Authentication.CookieSameSite","key":".cookie-same-site","configDoc":"SameSite attribute for the session, state and post logout cookies.","withinAMap":false,"defaultValue":"strict","javaDocSiteLink":"","docMapKey":"cookie-same-site","configPhase":"BUILD_TIME","acceptedValues":["`strict`","`lax`","`none`"],"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":true}},{"configDocKey":{"type":"java.lang.Boolean","key":".user-info-required","configDoc":"If this property is set to 'true' then an OIDC UserInfo endpoint will be called.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"user-info-required","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":".session-age-extension","configDoc":"Session age extension in minutes. The user session age property is set to the value of the ID token life-span by default and the user will be redirected to the OIDC provider to re-authenticate once the session has expired. If this property is set to a non-zero value then the expired ID token can be refreshed before the session has expired. This property will be ignored if the `token.refresh-expired` property has not been enabled.","withinAMap":false,"defaultValue":"5M","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"session-age-extension","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"boolean","key":".java-script-auto-redirect","configDoc":"If this property is set to 'true' then a normal 302 redirect response will be returned if the request was initiated via JavaScript API such as XMLHttpRequest or Fetch and the current user needs to be (re)authenticated which may not be desirable for Single Page Applications since it automatically following the redirect may not work given that OIDC authorization endpoints typically do not support CORS. If this property is set to `false` then a status code of '499' will be returned to allow the client to handle the redirect manually","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"java-script-auto-redirect","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":".id-token-required","configDoc":"Requires that ID token is available when the authorization code flow completes. Disable this property only when you need to use the authorization code flow with OAuth2 providers which do not return ID token - an internal IdToken will be generated in such cases.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"id-token-required","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":".internal-id-token-lifespan","configDoc":"Internal ID token lifespan. This property is only checked when an internal IdToken is generated when Oauth2 providers do not return IdToken.","withinAMap":false,"defaultValue":"5M","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"internal-id-token-lifespan","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":".pkce-required","configDoc":"Requires that a Proof Key for Code Exchange (PKCE) is used.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"pkce-required","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}},{"configDocKey":{"type":"string","key":".pkce-secret","configDoc":"Secret which will be used to encrypt a Proof Key for Code Exchange (PKCE) code verifier in the code flow state. This secret must be set if PKCE is required but no client secret is set. The length of the secret which will be used to encrypt the code verifier must be 32 characters long.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"pkce-secret","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","enum":false}}]